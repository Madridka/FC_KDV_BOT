import TelegramBot from "node-telegram-bot-api";
import dotenv from "dotenv";
import path from "path";
import { fileURLToPath } from "url";

dotenv.config();

const TOKEN = process.env.BOT_TOKEN;
const bot = new TelegramBot(TOKEN, { polling: true });

const messageStore = {
  replyText:
    "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç –§–ö –ö–î–í! –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!\n–ê –ø–æ–∫–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –ø–∞–±–ª–∏–∫ - @boroda_tomsk_youtube",
};

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const nextMatch =
  "‚úàÔ∏è // 17 –∞–≤–≥—É—Å—Ç–∞ (–≤—Å–∫)  \n–§–ö –ö–î–í - –î–∏–Ω–∞–º–æ-–ë–∞—Ä–Ω–∞—É–ª\n17-—ã–π —Ç—É—Ä Leon 2 –õ–∏–≥–∞ –ë \n@boroda_tomsk_youtube";
const textButtonNextMatch = "–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç—á";
const urlNextMatch = "https://fnl.pro/leon-b/matches/48803";

const prevMatch =
  "‚úàÔ∏è // –ü–û–ë–ï–ï–ï–ï–î–ê–ê–ê–ê!!!!! 10 –∞–≤–≥—É—Å—Ç–∞\n–ê–º–∫–∞—Ä (–ü–µ—Ä–º—å) 2 - 3 –§–ö –ö–î–í \n16-—ã–π —Ç—É—Ä Leon 2 –õ–∏–≥–∞ –ë \n@boroda_tomsk_youtube";
const textButtonPrevMatch = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—á–∞";
const urlPrevMatch = "https://fnl.pro/leon-b/matches/48775";

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  sendWelcome(chatId);
});

function sendWelcome(chatId) {
  bot.sendMessage(chatId, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑ –º–µ–Ω—é.", {
    reply_markup: {
      keyboard: [
        ["–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", "–ò–Ω—Ñ–æ"],
        ["–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞", "–°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π"],
        ["–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–∞—Ç—á", "–ë–ª–∏–∂–∞–π—à–∏–π –º–∞—Ç—á"],
      ],
      resize_keyboard: true,
      one_time_keyboard: false,
    },
  });
}

bot.on("message", (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (text === "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞") {
    sendWelcome(chatId);
  }

  if (text === "–ò–Ω—Ñ–æ") {
    bot.sendMessage(chatId, messageStore.replyText);
  }

  if (text === "–°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π") {
    const imagePath = path.join(__dirname, "static", "matches.jpg");
    bot.sendPhoto(chatId, imagePath, {
      caption: "üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –º–∞—Ç—á–∏ –§–ö –ö–î–í \n@boroda_tomsk_youtube",
    });
  }

  if (text === "–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞") {
    const imagePath = path.join(__dirname, "static", "table.png");
    bot.sendPhoto(chatId, imagePath, {
      caption:
        "üèÜ –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ Leon –õ–∏–≥–∞ –ë, –≥—Ä—É–ø–ø–∞ 4 \n@boroda_tomsk_youtube",
    });
  }

  if (text === "–ë–ª–∏–∂–∞–π—à–∏–π –º–∞—Ç—á") {
    bot.sendMessage(chatId, nextMatch, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: textButtonNextMatch,
              url: urlNextMatch,
            },
          ],
        ],
      },
    });
  }

  if (text === "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–∞—Ç—á") {
    bot.sendMessage(chatId, prevMatch, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: textButtonPrevMatch,
              url: urlPrevMatch,
            },
          ],
        ],
      },
    });
  }
});
